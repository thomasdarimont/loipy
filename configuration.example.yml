# Log level (see https://docs.python.org/3/howto/logging.html for details).
log_level: DEBUG

# Issuer Identifier under which to operate. If in doubt, use the server base
# URL. MUST be an HTTPS URL. See
# https://openid.net/specs/openid-connect-core-1_0.html#IssuerIdentifier for
# background information.
iss: "https://example.com/"

# Secret key for signing ID tokens (in PEM format).
private_key: key.pem

# yes® client configuration. See https://github.com/yescom/pyes for details.
"yes":
  environment: "sandbox"
  client_id: sandbox.yes.com:e85ff3bc-96f8-4ae7-b6b1-894d8dde9ebe
  cert_file: /data/yes-client/cert.pem
  key_file: /data/yes-client/key.pem
  redirect_uri: https://example.com/yes/oidccb

# Flask webserver configuration. See
# https://flask.palletsprojects.com/en/1.1.x/config/ for details.
flask:
  SERVER_NAME: "example.com"
  SECRET_KEY: # Configure a secret key here, see flask config!
  SESSION_COOKIE_NAME: "yesproxysession"
  SUBJECT_ID_HASH_SALT: TODO
  PREFERRED_URL_SCHEME: "http"
  SESSION_TYPE: 'redis'
  SESSION_PERMANENT: False
  REDIS_URL: "redis://localhost:6379/0" # Redis URL for sessions and to cache user data

# OpenID Connect client configuration.
# See https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata for keys/values.
clients:
  test: # = client ID
    client_secret: some_secret_for_your_client
    redirect_uris:
      - https://example.com/oidc/redirect # Redirect URI of your legacy OIDC relying party
    response_types:
      - code
    token_endpoint_auth_method: client_secret_post

# Time after which to invalidate data in the redis cache
user_data_expiration_seconds: 300

# List of scopes that the proxy should accepts and their "translation" into yes®
# claims. All claims will be requested from the userinfo endpoint at the yes®
# IDP. See the yes® developer documentation for details.
scope_to_claims_mapping:
  testscope:
    "https://www.yes.com/claims/preferred_iban":
    "verified_claims":
      "verification":
        "trust_framework":
          "value": "de_aml"
      "claims":
        "given_name":
        "family_name":
        "birthdate":

# List of scopes that the proxy should accept and whether to request "Strong
# Customer Authentication" from the bank for the respective scope. See the yes®
# developer documentation on `acr_values` for details.
scope_to_sca_mapping:
  testscope: yes
